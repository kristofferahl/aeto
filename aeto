#!/usr/bin/env bash

declare resource_prefix="${AETO_RESOURCE_PREFIX:-tenant-}"

print() {
  local all=false
  [[ "${1:-}" == '--all' ]] && all=true

  if [[ ${all:?} == true ]]; then
    echo
    echo 'ResourceTemplate'
    kubectl get resourcetemplate -A -o wide

    echo
    echo 'Blueprint'
    kubectl get blueprint -A -o wide
  fi

  echo
  echo 'Tenant'
  kubectl get tenant -A -o wide

  echo
  echo 'EventStreamChunk'
  kubectl get eventstreamchunk -A -o wide

  echo
  echo 'ResourceSet'
  kubectl get resourceset -A -o wide

  if [[ ${all:?} == true ]]; then
    echo
    echo 'Namespaces'
    kubectl get namespaces | grep "${resource_prefix:?}"

    echo
    echo 'NetworkPolicy'
    kubectl get networkpolicy -A

    echo
    echo 'LimitRange'
    kubectl get limitrange -A
  fi

  echo
  echo 'AWS Route53 HostedZone'
  kubectl get hostedzone -A -o wide

  echo
  echo 'AWS ACM Certificate'
  kubectl get certificate -A -o wide

  echo
  echo 'AWS ACM CertificateConnector'
  kubectl get certificateconnector -A -o wide

  if [[ ${all:?} == true ]]; then
    echo
    echo 'Deployment'
    kubectl get deployment -A | grep "${resource_prefix:?}"

    echo
    echo 'Service'
    kubectl get service -A | grep "${resource_prefix:?}"

    echo
    echo 'Ingress'
    kubectl get ingress -A | grep "${resource_prefix:?}"
  fi

  echo
}

events() {
  echo
  echo 'EventStreamChunks:'
  kubectl -n aeto get eventstreamchunk -o wide

  echo
  echo 'Event summary:'
  kubectl -n aeto get eventstreamchunk -o json | jq -r '.items[].spec.events[].raw' | jq -c -r .type

  echo
  echo 'Event details:'
  kubectl -n aeto get eventstreamchunk -o json | jq -r '.items[].spec.events[].raw' | jq -c .
}

apply() {
  kubectl apply -k config/default-resources/
  kubectl apply -k config/samples/
  echo 'watching Tenant and ResourceSets...'
  # kubectl --namespace <namespace> tenant <name> wait --for=condition=ready -o name
  sleep 1
  while true; do
    clear && print
    sleep 3
  done
}

destroy() {
  kubectl delete -k config/samples/
  print --all
  echo 'Press any key to continue running a full cleanup...'
  read -r
  cleanup
}

cleanup() {
  echo 'running a full cleanup'
  kubectl delete -k config/default-resources/
  # shellcheck disable=SC2046
  kubectl -n aeto delete resourceset $(kubectl -n aeto get resourceset -o jsonpath='{.items[*].metadata.name}')
  # shellcheck disable=SC2046
  kubectl -n aeto delete eventstreamchunk $(kubectl -n aeto get eventstreamchunk -o jsonpath='{.items[*].metadata.name}')
  kubectl delete namespace tenant-example
}

watch() {
  while true; do
    clear && print && sleep 3
  done
}

localenv() {
  {
    sed "/AWS_REGION=.*/d" <.env |
      sed "/AWS_ACCESS_KEY_ID=.*/d" |
      sed "/AWS_SECRET_ACCESS_KEY=.*/d" |
      sed "/AWS_SESSION_TOKEN=.*/d"
    echo "AWS_REGION=${AWS_REGION:?}"
    echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:?}"
    echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:?}"
    echo "AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN:?}"
  } >.tempenv
  mv .tempenv .env
}

release() {
  make manifests
  make generate
  goreleaser release --rm-dist
}

main() {
  case "${1:-}" in
  localenv) localenv ;;
  apply) apply ;;
  destroy) destroy ;;
  cleanup) cleanup ;;
  watch) watch ;;
  events) events ;;
  release) release ;;
  *) print --all ;;
  esac
}

main "$@"
